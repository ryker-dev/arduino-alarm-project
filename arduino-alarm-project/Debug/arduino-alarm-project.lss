
arduino-alarm-project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800200  000003f8  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000476  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000105f  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cff  00000000  00000000  00001597  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005b0  00000000  00000000  00002296  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00002848  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005f5  00000000  00000000  000028b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003a0  00000000  00000000  00002ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00003245  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ef       	ldi	r30, 0xF8	; 248
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 30       	cpi	r26, 0x0A	; 10
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	02 d0       	rcall	.+4      	; 0x114 <main>
 110:	71 c1       	rjmp	.+738    	; 0x3f4 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <main>:
    stdout = &uart_output;
    stdin = &uart_input;
    
    USART_init(UBRR);*/
    
    check_password();
 114:	26 d0       	rcall	.+76     	; 0x162 <check_password>
 116:	ff cf       	rjmp	.-2      	; 0x116 <main+0x2>

00000118 <led_test>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>

void led_test(void){
    PORTB &= ~(1 << PB0);
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	8e 7f       	andi	r24, 0xFE	; 254
 11c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	2f e3       	ldi	r18, 0x3F	; 63
 120:	8d e0       	ldi	r24, 0x0D	; 13
 122:	93 e0       	ldi	r25, 0x03	; 3
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <led_test+0xc>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <led_test+0x16>
 12e:	00 00       	nop
    _delay_ms(1000);
    PORTB |= (1 << PB0);
 130:	85 b1       	in	r24, 0x05	; 5
 132:	81 60       	ori	r24, 0x01	; 1
 134:	85 b9       	out	0x05, r24	; 5
 136:	2f e3       	ldi	r18, 0x3F	; 63
 138:	8d e0       	ldi	r24, 0x0D	; 13
 13a:	93 e0       	ldi	r25, 0x03	; 3
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	90 40       	sbci	r25, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <led_test+0x24>
 144:	00 c0       	rjmp	.+0      	; 0x146 <led_test+0x2e>
 146:	00 00       	nop
    _delay_ms(1000);
    PORTB &= ~(1 << PB0);
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	85 b9       	out	0x05, r24	; 5
 14e:	2f e3       	ldi	r18, 0x3F	; 63
 150:	8d e0       	ldi	r24, 0x0D	; 13
 152:	93 e0       	ldi	r25, 0x03	; 3
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <led_test+0x3c>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <led_test+0x46>
 15e:	00 00       	nop
 160:	08 95       	ret

00000162 <check_password>:


int check_password(void)
{
    /********************testing****************************/
    DDRB |= (1 << PB0);
 162:	84 b1       	in	r24, 0x04	; 4
 164:	81 60       	ori	r24, 0x01	; 1
 166:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1 << PB1);
 168:	84 b1       	in	r24, 0x04	; 4
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1 << PB2);
 16e:	84 b1       	in	r24, 0x04	; 4
 170:	84 60       	ori	r24, 0x04	; 4
 172:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1 << PB3);
 174:	84 b1       	in	r24, 0x04	; 4
 176:	88 60       	ori	r24, 0x08	; 8
 178:	84 b9       	out	0x04, r24	; 4
    char *password = "0123";
    char *given_password = "xxxx";
    int idx = 0;
    
    // Set digital pins 0-3 (rows) as output and 4-7 (columns) as input
    DDRD |= 0b00001111;
 17a:	8a b1       	in	r24, 0x0a	; 10
 17c:	8f 60       	ori	r24, 0x0F	; 15
 17e:	8a b9       	out	0x0a, r24	; 10
 180:	89 ef       	ldi	r24, 0xF9	; 249
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <check_password+0x22>
 188:	00 c0       	rjmp	.+0      	; 0x18a <check_password+0x28>
 18a:	00 00       	nop
    _delay_ms(1);
    
    PORTD = 0b11110000;    // Power the row pins
 18c:	80 ef       	ldi	r24, 0xF0	; 240
 18e:	8b b9       	out	0x0b, r24	; 11
    stdin = &uart_input;*/
    /******************************************************/
    
    char *password = "0123";
    char *given_password = "xxxx";
    int idx = 0;
 190:	c0 e0       	ldi	r28, 0x00	; 0
 192:	d0 e0       	ldi	r29, 0x00	; 0
    int key_pressed = 0;
    
    while (1) 
    {
        
        if (PIND != 0b11110000) {     // If any of row pins goes low (!??)
 194:	89 b1       	in	r24, 0x09	; 9
 196:	80 3f       	cpi	r24, 0xF0	; 240
 198:	e9 f3       	breq	.-6      	; 0x194 <check_password+0x32>
            key_pressed = PIND;
 19a:	29 b1       	in	r18, 0x09	; 9
 19c:	83 ec       	ldi	r24, 0xC3	; 195
 19e:	99 e0       	ldi	r25, 0x09	; 9
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <check_password+0x3e>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <check_password+0x44>
 1a6:	00 00       	nop
            _delay_ms(10);
            DDRD ^= 0b11111111;      // Make rows as inputs and columns as outputs
 1a8:	9a b1       	in	r25, 0x0a	; 10
 1aa:	90 95       	com	r25
 1ac:	9a b9       	out	0x0a, r25	; 10
 1ae:	83 ec       	ldi	r24, 0xC3	; 195
 1b0:	99 e0       	ldi	r25, 0x09	; 9
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <check_password+0x50>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <check_password+0x56>
 1b8:	00 00       	nop
            _delay_ms(10);
             PORTD ^= 0b11111111;        // Power the columns
 1ba:	9b b1       	in	r25, 0x0b	; 11
 1bc:	90 95       	com	r25
 1be:	9b b9       	out	0x0b, r25	; 11
 1c0:	83 ec       	ldi	r24, 0xC3	; 195
 1c2:	99 e0       	ldi	r25, 0x09	; 9
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <check_password+0x62>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <check_password+0x68>
 1ca:	00 00       	nop
            _delay_ms(10);
            
            key_pressed |= PIND;    // The variable has now both row and column values as 0, others as 1
 1cc:	89 b1       	in	r24, 0x09	; 9
 1ce:	82 2b       	or	r24, r18
 1d0:	90 e0       	ldi	r25, 0x00	; 0
            
            if (key_pressed == 0b01110111) {
 1d2:	87 37       	cpi	r24, 0x77	; 119
 1d4:	91 05       	cpc	r25, r1
 1d6:	71 f4       	brne	.+28     	; 0x1f4 <check_password+0x92>
                // Key 1 pressed
                given_password[idx] = '1';
 1d8:	81 e3       	ldi	r24, 0x31	; 49
 1da:	fe 01       	movw	r30, r28
 1dc:	e0 50       	subi	r30, 0x00	; 0
 1de:	fe 4f       	sbci	r31, 0xFE	; 254
 1e0:	80 83       	st	Z, r24
                if (password[idx] == '1') {
 1e2:	fe 01       	movw	r30, r28
 1e4:	eb 5f       	subi	r30, 0xFB	; 251
 1e6:	fd 4f       	sbci	r31, 0xFD	; 253
 1e8:	80 81       	ld	r24, Z
 1ea:	81 33       	cpi	r24, 0x31	; 49
 1ec:	09 f0       	breq	.+2      	; 0x1f0 <check_password+0x8e>
 1ee:	ee c0       	rjmp	.+476    	; 0x3cc <check_password+0x26a>
                    led_test();
 1f0:	93 df       	rcall	.-218    	; 0x118 <led_test>
 1f2:	ec c0       	rjmp	.+472    	; 0x3cc <check_password+0x26a>
                }
            }
            else if (key_pressed == 0b01111011) {
 1f4:	8b 37       	cpi	r24, 0x7B	; 123
 1f6:	91 05       	cpc	r25, r1
 1f8:	71 f4       	brne	.+28     	; 0x216 <check_password+0xb4>
                // Key 2 pressed
                given_password[idx] = '2';
 1fa:	82 e3       	ldi	r24, 0x32	; 50
 1fc:	fe 01       	movw	r30, r28
 1fe:	e0 50       	subi	r30, 0x00	; 0
 200:	fe 4f       	sbci	r31, 0xFE	; 254
 202:	80 83       	st	Z, r24
                if (password[idx] == '2') {
 204:	fe 01       	movw	r30, r28
 206:	eb 5f       	subi	r30, 0xFB	; 251
 208:	fd 4f       	sbci	r31, 0xFD	; 253
 20a:	80 81       	ld	r24, Z
 20c:	82 33       	cpi	r24, 0x32	; 50
 20e:	09 f0       	breq	.+2      	; 0x212 <check_password+0xb0>
                    led_test();
 210:	dd c0       	rjmp	.+442    	; 0x3cc <check_password+0x26a>
 212:	82 df       	rcall	.-252    	; 0x118 <led_test>
 214:	db c0       	rjmp	.+438    	; 0x3cc <check_password+0x26a>
                }
            }
            else if (key_pressed == 0b01111101) {
 216:	8d 37       	cpi	r24, 0x7D	; 125
 218:	91 05       	cpc	r25, r1
 21a:	71 f4       	brne	.+28     	; 0x238 <check_password+0xd6>
                // Key 3 pressed
                given_password[idx] = '3';
 21c:	83 e3       	ldi	r24, 0x33	; 51
 21e:	fe 01       	movw	r30, r28
 220:	e0 50       	subi	r30, 0x00	; 0
 222:	fe 4f       	sbci	r31, 0xFE	; 254
 224:	80 83       	st	Z, r24
                if (password[idx] == '3') {
 226:	fe 01       	movw	r30, r28
 228:	eb 5f       	subi	r30, 0xFB	; 251
 22a:	fd 4f       	sbci	r31, 0xFD	; 253
 22c:	80 81       	ld	r24, Z
 22e:	83 33       	cpi	r24, 0x33	; 51
 230:	09 f0       	breq	.+2      	; 0x234 <check_password+0xd2>
                    led_test();
 232:	cc c0       	rjmp	.+408    	; 0x3cc <check_password+0x26a>
 234:	71 df       	rcall	.-286    	; 0x118 <led_test>
 236:	ca c0       	rjmp	.+404    	; 0x3cc <check_password+0x26a>
                }
            }
            else if (key_pressed == 0b01111110) {
 238:	8e 37       	cpi	r24, 0x7E	; 126
 23a:	91 05       	cpc	r25, r1
 23c:	71 f4       	brne	.+28     	; 0x25a <check_password+0xf8>
                // A
                given_password[idx] = 'A';
 23e:	81 e4       	ldi	r24, 0x41	; 65
 240:	fe 01       	movw	r30, r28
 242:	e0 50       	subi	r30, 0x00	; 0
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	80 83       	st	Z, r24
                if (password[idx] == 'A') {
 248:	fe 01       	movw	r30, r28
 24a:	eb 5f       	subi	r30, 0xFB	; 251
 24c:	fd 4f       	sbci	r31, 0xFD	; 253
 24e:	80 81       	ld	r24, Z
 250:	81 34       	cpi	r24, 0x41	; 65
 252:	09 f0       	breq	.+2      	; 0x256 <check_password+0xf4>
                    led_test();
 254:	bb c0       	rjmp	.+374    	; 0x3cc <check_password+0x26a>
 256:	60 df       	rcall	.-320    	; 0x118 <led_test>
 258:	b9 c0       	rjmp	.+370    	; 0x3cc <check_password+0x26a>
                }
            }
            else if (key_pressed == 0b10110111) {
 25a:	87 3b       	cpi	r24, 0xB7	; 183
 25c:	91 05       	cpc	r25, r1
 25e:	71 f4       	brne	.+28     	; 0x27c <check_password+0x11a>
                // 4
                given_password[idx] = '4';
 260:	84 e3       	ldi	r24, 0x34	; 52
 262:	fe 01       	movw	r30, r28
 264:	e0 50       	subi	r30, 0x00	; 0
 266:	fe 4f       	sbci	r31, 0xFE	; 254
 268:	80 83       	st	Z, r24
                if (password[idx] == '4') {
 26a:	fe 01       	movw	r30, r28
 26c:	eb 5f       	subi	r30, 0xFB	; 251
 26e:	fd 4f       	sbci	r31, 0xFD	; 253
 270:	80 81       	ld	r24, Z
 272:	84 33       	cpi	r24, 0x34	; 52
 274:	09 f0       	breq	.+2      	; 0x278 <check_password+0x116>
                    led_test();
 276:	aa c0       	rjmp	.+340    	; 0x3cc <check_password+0x26a>
 278:	4f df       	rcall	.-354    	; 0x118 <led_test>
 27a:	a8 c0       	rjmp	.+336    	; 0x3cc <check_password+0x26a>
                }
            }
            else if (key_pressed == 0b10111011) {
 27c:	8b 3b       	cpi	r24, 0xBB	; 187
 27e:	91 05       	cpc	r25, r1
 280:	71 f4       	brne	.+28     	; 0x29e <check_password+0x13c>
                // 5
                given_password[idx] = '5';
 282:	85 e3       	ldi	r24, 0x35	; 53
 284:	fe 01       	movw	r30, r28
 286:	e0 50       	subi	r30, 0x00	; 0
 288:	fe 4f       	sbci	r31, 0xFE	; 254
 28a:	80 83       	st	Z, r24
                if (password[idx] == '5') {
 28c:	fe 01       	movw	r30, r28
 28e:	eb 5f       	subi	r30, 0xFB	; 251
 290:	fd 4f       	sbci	r31, 0xFD	; 253
 292:	80 81       	ld	r24, Z
 294:	85 33       	cpi	r24, 0x35	; 53
 296:	09 f0       	breq	.+2      	; 0x29a <check_password+0x138>
                    led_test();
 298:	99 c0       	rjmp	.+306    	; 0x3cc <check_password+0x26a>
 29a:	3e df       	rcall	.-388    	; 0x118 <led_test>
 29c:	97 c0       	rjmp	.+302    	; 0x3cc <check_password+0x26a>
                }
            }
            else if (key_pressed == 0b10111101) {
 29e:	8d 3b       	cpi	r24, 0xBD	; 189
 2a0:	91 05       	cpc	r25, r1
 2a2:	71 f4       	brne	.+28     	; 0x2c0 <check_password+0x15e>
                // 6
                given_password[idx] = '6';
 2a4:	86 e3       	ldi	r24, 0x36	; 54
 2a6:	fe 01       	movw	r30, r28
 2a8:	e0 50       	subi	r30, 0x00	; 0
 2aa:	fe 4f       	sbci	r31, 0xFE	; 254
 2ac:	80 83       	st	Z, r24
                if (password[idx] == '6') {
 2ae:	fe 01       	movw	r30, r28
 2b0:	eb 5f       	subi	r30, 0xFB	; 251
 2b2:	fd 4f       	sbci	r31, 0xFD	; 253
 2b4:	80 81       	ld	r24, Z
 2b6:	86 33       	cpi	r24, 0x36	; 54
 2b8:	09 f0       	breq	.+2      	; 0x2bc <check_password+0x15a>
                    led_test();
 2ba:	88 c0       	rjmp	.+272    	; 0x3cc <check_password+0x26a>
 2bc:	2d df       	rcall	.-422    	; 0x118 <led_test>
 2be:	86 c0       	rjmp	.+268    	; 0x3cc <check_password+0x26a>
                }
            }
            else if (key_pressed == 0b10111110) {
 2c0:	8e 3b       	cpi	r24, 0xBE	; 190
 2c2:	91 05       	cpc	r25, r1
 2c4:	71 f4       	brne	.+28     	; 0x2e2 <check_password+0x180>
                // B
                given_password[idx] = 'B';
 2c6:	82 e4       	ldi	r24, 0x42	; 66
 2c8:	fe 01       	movw	r30, r28
 2ca:	e0 50       	subi	r30, 0x00	; 0
 2cc:	fe 4f       	sbci	r31, 0xFE	; 254
 2ce:	80 83       	st	Z, r24
                if (password[idx] == 'B') {
 2d0:	fe 01       	movw	r30, r28
 2d2:	eb 5f       	subi	r30, 0xFB	; 251
 2d4:	fd 4f       	sbci	r31, 0xFD	; 253
 2d6:	80 81       	ld	r24, Z
 2d8:	82 34       	cpi	r24, 0x42	; 66
 2da:	09 f0       	breq	.+2      	; 0x2de <check_password+0x17c>
                    led_test();
 2dc:	77 c0       	rjmp	.+238    	; 0x3cc <check_password+0x26a>
 2de:	1c df       	rcall	.-456    	; 0x118 <led_test>
 2e0:	75 c0       	rjmp	.+234    	; 0x3cc <check_password+0x26a>
                }
            }
            else if (key_pressed == 0b11010111) {
 2e2:	87 3d       	cpi	r24, 0xD7	; 215
 2e4:	91 05       	cpc	r25, r1
 2e6:	71 f4       	brne	.+28     	; 0x304 <check_password+0x1a2>
                // 7
                given_password[idx] = '7';
 2e8:	87 e3       	ldi	r24, 0x37	; 55
 2ea:	fe 01       	movw	r30, r28
 2ec:	e0 50       	subi	r30, 0x00	; 0
 2ee:	fe 4f       	sbci	r31, 0xFE	; 254
                if (password[idx] == '7') {
 2f0:	80 83       	st	Z, r24
 2f2:	fe 01       	movw	r30, r28
 2f4:	eb 5f       	subi	r30, 0xFB	; 251
 2f6:	fd 4f       	sbci	r31, 0xFD	; 253
 2f8:	80 81       	ld	r24, Z
 2fa:	87 33       	cpi	r24, 0x37	; 55
 2fc:	09 f0       	breq	.+2      	; 0x300 <check_password+0x19e>
                    led_test();
 2fe:	66 c0       	rjmp	.+204    	; 0x3cc <check_password+0x26a>
 300:	0b df       	rcall	.-490    	; 0x118 <led_test>
 302:	64 c0       	rjmp	.+200    	; 0x3cc <check_password+0x26a>
                }
            }
            else if (key_pressed == 0b11011011) {
 304:	8b 3d       	cpi	r24, 0xDB	; 219
 306:	91 05       	cpc	r25, r1
 308:	71 f4       	brne	.+28     	; 0x326 <check_password+0x1c4>
                // 8
                given_password[idx] = '8';
 30a:	88 e3       	ldi	r24, 0x38	; 56
 30c:	fe 01       	movw	r30, r28
 30e:	e0 50       	subi	r30, 0x00	; 0
 310:	fe 4f       	sbci	r31, 0xFE	; 254
                if (password[idx] == '8') {
 312:	80 83       	st	Z, r24
 314:	fe 01       	movw	r30, r28
 316:	eb 5f       	subi	r30, 0xFB	; 251
 318:	fd 4f       	sbci	r31, 0xFD	; 253
 31a:	80 81       	ld	r24, Z
 31c:	88 33       	cpi	r24, 0x38	; 56
 31e:	09 f0       	breq	.+2      	; 0x322 <check_password+0x1c0>
                    led_test();
 320:	55 c0       	rjmp	.+170    	; 0x3cc <check_password+0x26a>
 322:	fa de       	rcall	.-524    	; 0x118 <led_test>
 324:	53 c0       	rjmp	.+166    	; 0x3cc <check_password+0x26a>
                }
            }
            else if (key_pressed == 0b11011101) {
 326:	8d 3d       	cpi	r24, 0xDD	; 221
 328:	91 05       	cpc	r25, r1
 32a:	71 f4       	brne	.+28     	; 0x348 <check_password+0x1e6>
                // 9
                given_password[idx] = '9';
 32c:	89 e3       	ldi	r24, 0x39	; 57
 32e:	fe 01       	movw	r30, r28
 330:	e0 50       	subi	r30, 0x00	; 0
 332:	fe 4f       	sbci	r31, 0xFE	; 254
                if (password[idx] == '9') {
 334:	80 83       	st	Z, r24
 336:	fe 01       	movw	r30, r28
 338:	eb 5f       	subi	r30, 0xFB	; 251
 33a:	fd 4f       	sbci	r31, 0xFD	; 253
 33c:	80 81       	ld	r24, Z
 33e:	89 33       	cpi	r24, 0x39	; 57
 340:	09 f0       	breq	.+2      	; 0x344 <check_password+0x1e2>
                    led_test();
 342:	44 c0       	rjmp	.+136    	; 0x3cc <check_password+0x26a>
 344:	e9 de       	rcall	.-558    	; 0x118 <led_test>
 346:	42 c0       	rjmp	.+132    	; 0x3cc <check_password+0x26a>
                }
            }
            else if (key_pressed == 0b11011110) {
 348:	8e 3d       	cpi	r24, 0xDE	; 222
 34a:	91 05       	cpc	r25, r1
 34c:	69 f4       	brne	.+26     	; 0x368 <check_password+0x206>
                // C
                given_password[idx] = 'C';
 34e:	83 e4       	ldi	r24, 0x43	; 67
 350:	fe 01       	movw	r30, r28
 352:	e0 50       	subi	r30, 0x00	; 0
 354:	fe 4f       	sbci	r31, 0xFE	; 254
                if (password[idx] == 'C') {
 356:	80 83       	st	Z, r24
 358:	fe 01       	movw	r30, r28
 35a:	eb 5f       	subi	r30, 0xFB	; 251
 35c:	fd 4f       	sbci	r31, 0xFD	; 253
 35e:	80 81       	ld	r24, Z
 360:	83 34       	cpi	r24, 0x43	; 67
                    led_test();
 362:	a1 f5       	brne	.+104    	; 0x3cc <check_password+0x26a>
 364:	d9 de       	rcall	.-590    	; 0x118 <led_test>
 366:	32 c0       	rjmp	.+100    	; 0x3cc <check_password+0x26a>
                }
            }
            else if (key_pressed == 0b11100111) {
 368:	87 3e       	cpi	r24, 0xE7	; 231
 36a:	91 05       	cpc	r25, r1
                // *
                given_password[idx] = '*';
 36c:	69 f4       	brne	.+26     	; 0x388 <check_password+0x226>
 36e:	8a e2       	ldi	r24, 0x2A	; 42
 370:	fe 01       	movw	r30, r28
 372:	e0 50       	subi	r30, 0x00	; 0
 374:	fe 4f       	sbci	r31, 0xFE	; 254
                if (password[idx] == '*') {
 376:	80 83       	st	Z, r24
 378:	fe 01       	movw	r30, r28
 37a:	eb 5f       	subi	r30, 0xFB	; 251
 37c:	fd 4f       	sbci	r31, 0xFD	; 253
 37e:	80 81       	ld	r24, Z
 380:	8a 32       	cpi	r24, 0x2A	; 42
                    led_test();
 382:	21 f5       	brne	.+72     	; 0x3cc <check_password+0x26a>
 384:	c9 de       	rcall	.-622    	; 0x118 <led_test>
 386:	22 c0       	rjmp	.+68     	; 0x3cc <check_password+0x26a>
                }
            }
            else if (key_pressed == 0b11101011) {
 388:	8b 3e       	cpi	r24, 0xEB	; 235
 38a:	91 05       	cpc	r25, r1
                // 0
                given_password[idx] = '0';
 38c:	69 f4       	brne	.+26     	; 0x3a8 <check_password+0x246>
 38e:	80 e3       	ldi	r24, 0x30	; 48
 390:	fe 01       	movw	r30, r28
 392:	e0 50       	subi	r30, 0x00	; 0
 394:	fe 4f       	sbci	r31, 0xFE	; 254
                if (password[idx] == '0') {
 396:	80 83       	st	Z, r24
 398:	fe 01       	movw	r30, r28
 39a:	eb 5f       	subi	r30, 0xFB	; 251
 39c:	fd 4f       	sbci	r31, 0xFD	; 253
 39e:	80 81       	ld	r24, Z
 3a0:	80 33       	cpi	r24, 0x30	; 48
                    led_test();
 3a2:	a1 f4       	brne	.+40     	; 0x3cc <check_password+0x26a>
 3a4:	b9 de       	rcall	.-654    	; 0x118 <led_test>
 3a6:	12 c0       	rjmp	.+36     	; 0x3cc <check_password+0x26a>
                }
            }
            else if (key_pressed == 0b11101101) {
 3a8:	8d 3e       	cpi	r24, 0xED	; 237
 3aa:	91 05       	cpc	r25, r1
 3ac:	79 f0       	breq	.+30     	; 0x3cc <check_password+0x26a>
                // #
                compare(password, given_password);
            }
            else if (key_pressed == 0b11101110) {
 3ae:	8e 3e       	cpi	r24, 0xEE	; 238
 3b0:	91 05       	cpc	r25, r1
                // D
                given_password[idx] = 'D';
 3b2:	61 f4       	brne	.+24     	; 0x3cc <check_password+0x26a>
 3b4:	84 e4       	ldi	r24, 0x44	; 68
 3b6:	fe 01       	movw	r30, r28
 3b8:	e0 50       	subi	r30, 0x00	; 0
 3ba:	fe 4f       	sbci	r31, 0xFE	; 254
                if (password[idx] == 'D') {
 3bc:	80 83       	st	Z, r24
 3be:	fe 01       	movw	r30, r28
 3c0:	eb 5f       	subi	r30, 0xFB	; 251
 3c2:	fd 4f       	sbci	r31, 0xFD	; 253
 3c4:	80 81       	ld	r24, Z
 3c6:	84 34       	cpi	r24, 0x44	; 68
                    led_test();
 3c8:	09 f4       	brne	.+2      	; 0x3cc <check_password+0x26a>
 3ca:	a6 de       	rcall	.-692    	; 0x118 <led_test>
                    _delay_ms(5);
                    //wait
                }
            }*/
            
            DDRD ^= 0b11111111;
 3cc:	8a b1       	in	r24, 0x0a	; 10
 3ce:	80 95       	com	r24
 3d0:	8a b9       	out	0x0a, r24	; 10
 3d2:	89 ef       	ldi	r24, 0xF9	; 249
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	01 97       	sbiw	r24, 0x01	; 1
 3d8:	f1 f7       	brne	.-4      	; 0x3d6 <check_password+0x274>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <check_password+0x27a>
 3dc:	00 00       	nop
            _delay_ms(1);
            PORTD ^= 0b11111111;
 3de:	8b b1       	in	r24, 0x0b	; 11
 3e0:	80 95       	com	r24
 3e2:	8b b9       	out	0x0b, r24	; 11
            key_pressed = 0;
            idx +=1;              
 3e4:	21 96       	adiw	r28, 0x01	; 1
 3e6:	87 ea       	ldi	r24, 0xA7	; 167
 3e8:	91 e6       	ldi	r25, 0x61	; 97
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <check_password+0x288>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <check_password+0x28e>
 3f0:	00 00       	nop
 3f2:	d0 ce       	rjmp	.-608    	; 0x194 <check_password+0x32>

000003f4 <_exit>:
 3f4:	f8 94       	cli

000003f6 <__stop_program>:
 3f6:	ff cf       	rjmp	.-2      	; 0x3f6 <__stop_program>
